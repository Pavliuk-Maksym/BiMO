
  /*******************************************************************
  * BiMO_API_Service.js
  * Generated by Backendless Corp.
  ********************************************************************/
		
const Utils = {
  isObject : obj => obj === Object(obj),
  isString : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'String',
  isNumber : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Number',
  isBoolean: obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Boolean',
  isDate   : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Date'
}

Backendless.APIServices.BiMO_API_Service = {
  getPlace(placeId) {   
    if (!Utils.isString(placeId)) {
      throw new Error('Invalid value for argument "placeId". Must be string value')
    }
    
    const args = placeId
    return Backendless.APIServices.invoke('BiMO_API_Service', 'getPlace', args)
  },

  addPlace(place) {   if (typeof place !== 'Place') {
        throw new Error('Invalid value for argument "place". Must be an Place object')
      }
      
    const args = place
    return Backendless.APIServices.invoke('BiMO_API_Service', 'addPlace', args)
  },

  updatePlace(place) {   if (typeof place !== 'Place') {
        throw new Error('Invalid value for argument "place". Must be an Place object')
      }
      
    const args = place
    return Backendless.APIServices.invoke('BiMO_API_Service', 'updatePlace', args)
  },

  deletePlace(placeId) {   
    if (!Utils.isString(placeId)) {
      throw new Error('Invalid value for argument "placeId". Must be string value')
    }
    
    const args = placeId
    return Backendless.APIServices.invoke('BiMO_API_Service', 'deletePlace', args)
  }
}
